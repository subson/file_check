<?php   
// $Id: file_check.module,v 1.5 2009/07/21 16:28:29 Subson Mittal Exp $
/**
 * @file
 * Checks for files listed in the files table, if they actually exists.
 */
 
/**
 * Implementation of hook_help().
 */
function file_check_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables the file check for files table.');
  }
}

/**
 * Implementation of hook_perm().
 */
function file_check_perm() {
  return array('access file_check');
}


/**
 * Implementation of hook_access().
 */
function file_check_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('access file_check');
  }

}

/**
 * Implementation of hook_menu().
 */
function file_check_menu() {
  $items['admin/reports/file_check'] = array(
    'title' => 'File check', 
    'description' => "Check the files table for any missing files.", 
    'page callback' => 'file_check_status',
    'access arguments' => array('access file_check'), 
  );
  $items['admin/reports/file_check/status'] = array(            
    'title'    => t('Files Status'),                     
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    
  );
  $items['admin/reports/file_check/list'] = array(            
    'title'    => t('List'),                     
    'page callback' => 'file_check_list',
    'access arguments' => array('access file_check'),
    'type' => MENU_LOCAL_TASK,
  );
    
  return $items;
}

/**
 * 
 */
function file_check_requirements() {
  global $conf;
  $requirements = array();
  $files = _file_check_file_counter($conf['file_directory_path'] . '/');

  $requirements['files'] = array(
    'value' => _files_get_count(),
  );
  $requirements['files']['severity'] = REQUIREMENT_INFO;
  $requirements['files']['title'] = t('Total files in files table');

  $requirements['file_check'] = array(
    'value' => _file_check_get_count(),
  );
  $requirements['file_check']['severity'] = REQUIREMENT_INFO;
  $requirements['file_check']['title'] = t('Matching files in asset folder');
  
  $requirements['asset_files'] = array(
    'value' => count($files),
  );
  $requirements['asset_files']['severity'] = REQUIREMENT_INFO;
  $requirements['asset_files']['title'] = t('Count of files in asset folder');

  return $requirements;
}

  
/*
 * Total count of files in files table and the physical count of files.
 */     

function file_check_status() {
  $i = 0;
  $requirements = file_check_requirements();
  $output = '<table class="system-status-report">';
  foreach ($requirements as $requirement) {
    if (empty($requirement['#type'])) {
      $class = ++$i % 2 == 0 ? 'even' : 'odd';

      $classes = array(
        REQUIREMENT_INFO => 'info', 
        REQUIREMENT_OK => 'ok', 
        REQUIREMENT_WARNING => 'warning', 
        REQUIREMENT_ERROR => 'error',
      );
      $class = $classes[isset($requirement['severity']) ? (int) $requirement['severity'] : 0] . ' ' . $class;

      // Output table row(s)
      if (!empty($requirement['description'])) {
        $output .= '<tr class="' . $class . ' merge-down"><th>' . $requirement['title'] . '</th><td>' . $requirement['value'] . '</td></tr>';
        $output .= '<tr class="' . $class . ' merge-up"><td colspan="2">' . $requirement['description'] . '</td></tr>';
      }
      else {
        $output .= '<tr class="' . $class . '"><th>' . $requirement['title'] . '</th><td>' . $requirement['value'] . '</td></tr>';
      }
    }
  }

  $output .= '</table>';
  
  $form = drupal_get_form('file_check_form');
  $output .= $form;
  return $output;
}

function dir_list($d) { 
  foreach (array_diff(scandir($d), array('.', '..')) as $f) {
    if (is_dir($d . '/' . $f)) {
      $l[]=$f; 
    }
  }  
  return $l; 
} 

function _file_check_file_counter($d=".", $x="") {
  foreach (array_diff(scandir($d), array('.', '..')) as $f) {
    if (is_file($d . '/' . $f) && (($x) ? ereg($x . '$', $f) : 1)) {
      $l[] = $f;
    } 
  }  
  return $l; 
} 

/*
 * Implementation of hook_form().
 */
function file_check_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check file status'),
  );

  return $form;
}

function file_check_form_submit() {
  _file_check_load_data();
  drupal_set_message(t('File check table is rebuilt.'));
}

function _files_get_count() {
  $files_count = db_result(db_query('SELECT count(*) as cnt FROM {files}'));
  return $files_count;
}

function _file_check_get_count() {
  $file_count = db_result(db_query('SELECT count(*) as cnt FROM {file_check} WHERE status = %d', 1));
  return $file_count;
}

function file_check_list() { 
  return theme('file_check_list');
}

function _file_check_load_data() {
  // load the data into file_check table  
  $output = '';
  $sql = 'SELECT f.fid, f.uid, f.filename, f.filepath, f.filesize, f.status, f.timestamp FROM {files} f';
  $result = db_query($sql);
  if (!$result) {
    $output = "No files available.";
  };

  while ($fnode = db_fetch_object($result)) {
    $data = '';
    $status = 0;
    $data['fid'] = $fnode->fid;
    $data['uid'] = $fnode->uid;
    $data['filename'] = $fnode->filename;
    $data['filepath'] = $fnode->filepath;
    if (file_exists($fnode->filepath)) {
      $status = 1;
    }
    else {
      $status = 0;
    }
    $data['status'] = $fnode->status;
    $data['timestamp'] = $fnode->timestamp;
    $timestamp = time();
    db_query('INSERT INTO {file_check} (fcid, data, status, timestamp) VALUES (%d, \'%s\', %d, %d)', $fnode->fid, serialize($data), $status, $timestamp);
  }

  return $output;
}

function theme_file_check_list() {
  $output = '';
  $headers = array(
    array('data' => t('File Id'), 'field' => 'fc.fcid'),
    array('data' => t('Data'), 'field' => 'filedata'),
    array('data' => t('Status'), 'field' => 'fc.status', 'sort' => 'desc'),
    array('data' => t('timestamp'), 'field' => 'fc.timestamp'),
  );

  $sql = 'SELECT fc.fcid, fc.data filedata, fc.status, fc.timestamp FROM {file_check} fc'. tablesort_sql($headers);
  $result = pager_query($sql, 30);
  if (!$result) {
    $output = "No files available.";
  };

  while ($fnode = db_fetch_object($result)) {
    $data[$fnode->fcid]['fcid'] = $fnode->fcid;
    $filedata = unserialize($fnode->filedata);
    $data[$fnode->fcid]['filedata'] = $filedata['filename'] ;
    $data[$fnode->fcid]['status'] = ($fnode->status) ? "Available" : "Not available";
    $data[$fnode->fcid]['timestamp'] = format_date($fnode->timestamp);
  }

  $output .= theme('table', $headers, $data);
  $pager = theme('pager', NULL, 30, 0);
  if (!empty($pager)) {
    $output .= $pager;
  }

  return $output;
}

/**
* @desc specify themes used
* implementation of hook_theme
*/
function file_check_theme() {
  $themes= array(
    'file_check_list' => array(
      'arguments' => array()
    ),
  );
  return $themes;
}